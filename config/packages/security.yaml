security:
    # on définit l'encoder, c'st à dire que l'on definit dans quelle entité nous allons encoder un donnée et par quel type d'encodage
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }

        in_database: 
            entity:
                class: App\Entity\User
                property: email


    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            lazy: true
            #provider: users_in_memory

            #on definit par rapport a quel provider? quelle données de la bdd sont a comparer de la connexion 
            provider: in_database


            form_login: 
                login_path: security_login #route du formulaire 
                check_path: security_login # route ou les données de connexion sont comparer

            # definit la route de deco et de redirection deconexion
            logout: 
                path: security_logout
                target: blog
            
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER



            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/login, roles: ROLE_USER }
        # si un membre possèdant un role ROLE_USER en bdd et qu'il  TENTE D4ACCEDER AU back office '/admin' on le redirige 
        
    access_denied_url: blog